//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRTool.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EvolutionEntities : DbContext
    {
        public EvolutionEntities()
            : base("name=EvolutionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<ActivityType> ActivityTypes { get; set; }
        public virtual DbSet<Admin_Document> Admin_Document { get; set; }
        public virtual DbSet<Airport> Airports { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<Benefit> Benefits { get; set; }
        public virtual DbSet<Benefits_Documents> Benefits_Documents { get; set; }
        public virtual DbSet<BradfordFactor_HolidaySettings> BradfordFactor_HolidaySettings { get; set; }
        public virtual DbSet<Business> Businesses { get; set; }
        public virtual DbSet<Case> Cases { get; set; }
        public virtual DbSet<Cases_Comments> Cases_Comments { get; set; }
        public virtual DbSet<Cases_Documents> Cases_Documents { get; set; }
        public virtual DbSet<certificate> certificates { get; set; }
        public virtual DbSet<certificate_document> certificate_document { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Cmp_Customer> Cmp_Customer { get; set; }
        public virtual DbSet<Company_Customer> Company_Customer { get; set; }
        public virtual DbSet<Company_Settings> Company_Settings { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<Email_Setting> Email_Setting { get; set; }
        public virtual DbSet<Employe_EmergencyContacts> Employe_EmergencyContacts { get; set; }
        public virtual DbSet<Employee_Educations> Employee_Educations { get; set; }
        public virtual DbSet<Employee_Endrosement_Comments> Employee_Endrosement_Comments { get; set; }
        public virtual DbSet<Employee_Experiences> Employee_Experiences { get; set; }
        public virtual DbSet<Employee_Languages> Employee_Languages { get; set; }
        public virtual DbSet<Employee_LateLeave> Employee_LateLeave { get; set; }
        public virtual DbSet<Employee_MaternityOrPaternityLeaves_Document> Employee_MaternityOrPaternityLeaves_Document { get; set; }
        public virtual DbSet<Employee_MeternityOrPaternityLeaves_Comment> Employee_MeternityOrPaternityLeaves_Comment { get; set; }
        public virtual DbSet<Employee_OtherLeave_Documents> Employee_OtherLeave_Documents { get; set; }
        public virtual DbSet<Employee_ProjectPlanner_TimeSheet> Employee_ProjectPlanner_TimeSheet { get; set; }
        public virtual DbSet<Employee_ProjectPlanner_TimeSheet_Detail> Employee_ProjectPlanner_TimeSheet_Detail { get; set; }
        public virtual DbSet<Employee_ProjectPlanner_TimeSheet_Documents> Employee_ProjectPlanner_TimeSheet_Documents { get; set; }
        public virtual DbSet<Employee_ProjectPlanner_TravelLeave_Documents> Employee_ProjectPlanner_TravelLeave_Documents { get; set; }
        public virtual DbSet<Employee_ProjectPlanner_Uplift> Employee_ProjectPlanner_Uplift { get; set; }
        public virtual DbSet<Employee_ProjectPlanner_Uplift_Documents> Employee_ProjectPlanner_Uplift_Documents { get; set; }
        public virtual DbSet<Employee_PublicHoliday> Employee_PublicHoliday { get; set; }
        public virtual DbSet<Employee_Qualifications> Employee_Qualifications { get; set; }
        public virtual DbSet<Employee_Resume> Employee_Resume { get; set; }
        public virtual DbSet<Employee_Salary> Employee_Salary { get; set; }
        public virtual DbSet<Employee_Salary_Deduction> Employee_Salary_Deduction { get; set; }
        public virtual DbSet<Employee_Salary_Deduction_Temp> Employee_Salary_Deduction_Temp { get; set; }
        public virtual DbSet<Employee_Salary_Entitlement_Temp> Employee_Salary_Entitlement_Temp { get; set; }
        public virtual DbSet<Employee_Salary_Entitlements> Employee_Salary_Entitlements { get; set; }
        public virtual DbSet<Employee_Salary_Temp> Employee_Salary_Temp { get; set; }
        public virtual DbSet<Employee_SickLeaves_Comments> Employee_SickLeaves_Comments { get; set; }
        public virtual DbSet<Employee_Task_Temp> Employee_Task_Temp { get; set; }
        public virtual DbSet<Employee_TimeSheet> Employee_TimeSheet { get; set; }
        public virtual DbSet<Employee_TimeSheet_Documents> Employee_TimeSheet_Documents { get; set; }
        public virtual DbSet<Employee_TOIL> Employee_TOIL { get; set; }
        public virtual DbSet<Employee_TravelLeave_Documents> Employee_TravelLeave_Documents { get; set; }
        public virtual DbSet<Employee_WorkPattern> Employee_WorkPattern { get; set; }
        public virtual DbSet<EmployeeRelation> EmployeeRelations { get; set; }
        public virtual DbSet<Function> Functions { get; set; }
        public virtual DbSet<HolidaysNAbsence_Setting> HolidaysNAbsence_Setting { get; set; }
        public virtual DbSet<Menu_List> Menu_List { get; set; }
        public virtual DbSet<Mobile_setting> Mobile_setting { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<News_Comments> News_Comments { get; set; }
        public virtual DbSet<PerformanceSetting> PerformanceSettings { get; set; }
        public virtual DbSet<Pool> Pools { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<PublicHolidayCountry> PublicHolidayCountries { get; set; }
        public virtual DbSet<PublicHoliday> PublicHolidays { get; set; }
        public virtual DbSet<QueryColunName> QueryColunNames { get; set; }
        public virtual DbSet<Role_DefaultMenu> Role_DefaultMenu { get; set; }
        public virtual DbSet<SkillSet> SkillSets { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<SystemList> SystemLists { get; set; }
        public virtual DbSet<SystemListValue> SystemListValues { get; set; }
        public virtual DbSet<Task_Documents> Task_Documents { get; set; }
        public virtual DbSet<Task_List> Task_List { get; set; }
        public virtual DbSet<TimeSheet_Setting> TimeSheet_Setting { get; set; }
        public virtual DbSet<TMS_Applicant_Comments> TMS_Applicant_Comments { get; set; }
        public virtual DbSet<TMS_Applicant_Documents> TMS_Applicant_Documents { get; set; }
        public virtual DbSet<TMS_Setting_RecruitmentProcesses> TMS_Setting_RecruitmentProcesses { get; set; }
        public virtual DbSet<Training_Document> Training_Document { get; set; }
        public virtual DbSet<UserMenu> UserMenus { get; set; }
        public virtual DbSet<Visa> Visas { get; set; }
        public virtual DbSet<Visa_Document> Visa_Document { get; set; }
        public virtual DbSet<WorkPatternDetail> WorkPatternDetails { get; set; }
        public virtual DbSet<EmployeeAddressInfo> EmployeeAddressInfoes { get; set; }
        public virtual DbSet<EmployeeTask> EmployeeTasks { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<HolidayYearAndMonthSetting> HolidayYearAndMonthSettings { get; set; }
        public virtual DbSet<Employee_ProjectPlanner_TravelLeave> Employee_ProjectPlanner_TravelLeave { get; set; }
        public virtual DbSet<EmployeeBankInfo> EmployeeBankInfoes { get; set; }
        public virtual DbSet<WorkPattern> WorkPatterns { get; set; }
        public virtual DbSet<Employee_AddEndrosementSkills> Employee_AddEndrosementSkills { get; set; }
        public virtual DbSet<System_settings> System_settings { get; set; }
        public virtual DbSet<Employee_SickLeaves_Documents> Employee_SickLeaves_Documents { get; set; }
        public virtual DbSet<Employee_Document_Signature> Employee_Document_Signature { get; set; }
        public virtual DbSet<Employee_AnualLeave> Employee_AnualLeave { get; set; }
        public virtual DbSet<Employee_OtherLeave> Employee_OtherLeave { get; set; }
        public virtual DbSet<Employee_ProjectPlanner_Scheduling> Employee_ProjectPlanner_Scheduling { get; set; }
        public virtual DbSet<Employee_ProjectPlanner_Uplift_Detail> Employee_ProjectPlanner_Uplift_Detail { get; set; }
        public virtual DbSet<Employee_TimeSheet_Detail> Employee_TimeSheet_Detail { get; set; }
        public virtual DbSet<Employee_TravelLeave> Employee_TravelLeave { get; set; }
        public virtual DbSet<Employee_SickLeaves> Employee_SickLeaves { get; set; }
        public virtual DbSet<Employee_MaternityOrPaternityLeaves> Employee_MaternityOrPaternityLeaves { get; set; }
        public virtual DbSet<Employee_Skills> Employee_Skills { get; set; }
        public virtual DbSet<TMS_Applicant> TMS_Applicant { get; set; }
        public virtual DbSet<Vacancy> Vacancies { get; set; }
        public virtual DbSet<Employee_Document> Employee_Document { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<EmployeeTraining> EmployeeTrainings { get; set; }
        public virtual DbSet<ApplicantRejectReason> ApplicantRejectReasons { get; set; }
        public virtual DbSet<QueryData> QueryDatas { get; set; }
        public virtual DbSet<EmployeePerformanceCustomerSegmentJSONDetail> EmployeePerformanceCustomerSegmentJSONDetails { get; set; }
        public virtual DbSet<EmployeePerformanceGoalComment> EmployeePerformanceGoalComments { get; set; }
        public virtual DbSet<EmployeePerformanceGoalDocument> EmployeePerformanceGoalDocuments { get; set; }
        public virtual DbSet<EmployeePerformance> EmployeePerformances { get; set; }
        public virtual DbSet<PerformanceCustomerDetail> PerformanceCustomerDetails { get; set; }
        public virtual DbSet<PerformanceCoWorkerDetail> PerformanceCoWorkerDetails { get; set; }
        public virtual DbSet<SendReviewToCoworker> SendReviewToCoworkers { get; set; }
        public virtual DbSet<SendReviewToCustomer> SendReviewToCustomers { get; set; }
        public virtual DbSet<EmployeePerformanceGoal> EmployeePerformanceGoals { get; set; }
        public virtual DbSet<EmployeePerformanceCoreJSONDetail> EmployeePerformanceCoreJSONDetails { get; set; }
        public virtual DbSet<EmployeePerformanceJobRoleSegmentJSONDetail> EmployeePerformanceJobRoleSegmentJSONDetails { get; set; }
        public virtual DbSet<PerformanceEmployeeDetail> PerformanceEmployeeDetails { get; set; }
    
        public virtual int AssignUserRole(Nullable<int> userId, Nullable<int> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignUserRole", userIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<GetAllEmployeeJobTitle_Result> GetAllEmployeeJobTitle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeeJobTitle_Result>("GetAllEmployeeJobTitle");
        }
    
        public virtual ObjectResult<GetAnnualLeaveNotificationDetails_Result> GetAnnualLeaveNotificationDetails(Nullable<int> employeeID, Nullable<int> detailsId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var detailsIdParameter = detailsId.HasValue ?
                new ObjectParameter("DetailsId", detailsId) :
                new ObjectParameter("DetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAnnualLeaveNotificationDetails_Result>("GetAnnualLeaveNotificationDetails", employeeIDParameter, detailsIdParameter);
        }
    
        public virtual ObjectResult<GetAnnualLeaveRequest_Result> GetAnnualLeaveRequest(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAnnualLeaveRequest_Result>("GetAnnualLeaveRequest", empIdParameter);
        }
    
        public virtual ObjectResult<GetCurrenciesFixedRateData_Result> GetCurrenciesFixedRateData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrenciesFixedRateData_Result>("GetCurrenciesFixedRateData", idParameter);
        }
    
        public virtual ObjectResult<GetCurrenciesIsFixData_Result> GetCurrenciesIsFixData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrenciesIsFixData_Result>("GetCurrenciesIsFixData");
        }
    
        public virtual ObjectResult<GetNewVacancyNotificationDetails_Result> GetNewVacancyNotificationDetails(Nullable<int> employeeID, Nullable<int> detailsId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var detailsIdParameter = detailsId.HasValue ?
                new ObjectParameter("DetailsId", detailsId) :
                new ObjectParameter("DetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewVacancyNotificationDetails_Result>("GetNewVacancyNotificationDetails", employeeIDParameter, detailsIdParameter);
        }
    
        public virtual ObjectResult<GetNotificationDetails_Result> GetNotificationDetails(Nullable<int> employeeID, Nullable<int> detailsId, string header)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var detailsIdParameter = detailsId.HasValue ?
                new ObjectParameter("DetailsId", detailsId) :
                new ObjectParameter("DetailsId", typeof(int));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotificationDetails_Result>("GetNotificationDetails", employeeIDParameter, detailsIdParameter, headerParameter);
        }
    
        public virtual ObjectResult<GetOrganizationDetails_Result> GetOrganizationDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrganizationDetails_Result>("GetOrganizationDetails");
        }
    
        public virtual ObjectResult<GetOtherLeaveApprovelList_Result> GetOtherLeaveApprovelList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOtherLeaveApprovelList_Result>("GetOtherLeaveApprovelList");
        }
    
        public virtual ObjectResult<GetOtherLeaveNotificationDetails_Result> GetOtherLeaveNotificationDetails(Nullable<int> employeeID, Nullable<int> detailsId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var detailsIdParameter = detailsId.HasValue ?
                new ObjectParameter("DetailsId", detailsId) :
                new ObjectParameter("DetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOtherLeaveNotificationDetails_Result>("GetOtherLeaveNotificationDetails", employeeIDParameter, detailsIdParameter);
        }
    
        public virtual ObjectResult<GetProjectPlannerTimeSheet_Approve_Result> GetProjectPlannerTimeSheet_Approve()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectPlannerTimeSheet_Approve_Result>("GetProjectPlannerTimeSheet_Approve");
        }
    
        public virtual ObjectResult<GetScheduleNotificationDetails_Result> GetScheduleNotificationDetails(Nullable<int> employeeID, Nullable<int> detailsId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var detailsIdParameter = detailsId.HasValue ?
                new ObjectParameter("DetailsId", detailsId) :
                new ObjectParameter("DetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScheduleNotificationDetails_Result>("GetScheduleNotificationDetails", employeeIDParameter, detailsIdParameter);
        }
    
        public virtual ObjectResult<GetTimeSheet_Approve_Result> GetTimeSheet_Approve()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimeSheet_Approve_Result>("GetTimeSheet_Approve");
        }
    
        public virtual ObjectResult<GetTimeSheetNotificationDetails_Result> GetTimeSheetNotificationDetails(Nullable<int> employeeID, Nullable<int> detailsId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var detailsIdParameter = detailsId.HasValue ?
                new ObjectParameter("DetailsId", detailsId) :
                new ObjectParameter("DetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimeSheetNotificationDetails_Result>("GetTimeSheetNotificationDetails", employeeIDParameter, detailsIdParameter);
        }
    
        public virtual ObjectResult<GetTrainingNotificationDetails_Result> GetTrainingNotificationDetails(Nullable<int> employeeID, Nullable<int> detailsId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var detailsIdParameter = detailsId.HasValue ?
                new ObjectParameter("DetailsId", detailsId) :
                new ObjectParameter("DetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingNotificationDetails_Result>("GetTrainingNotificationDetails", employeeIDParameter, detailsIdParameter);
        }
    
        public virtual ObjectResult<GetTravelNotificationDetails_Result> GetTravelNotificationDetails(Nullable<int> employeeID, Nullable<int> detailsId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var detailsIdParameter = detailsId.HasValue ?
                new ObjectParameter("DetailsId", detailsId) :
                new ObjectParameter("DetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTravelNotificationDetails_Result>("GetTravelNotificationDetails", employeeIDParameter, detailsIdParameter);
        }
    
        public virtual ObjectResult<GetUpliftNotificationDetails_Result> GetUpliftNotificationDetails(Nullable<int> employeeID, Nullable<int> detailsId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var detailsIdParameter = detailsId.HasValue ?
                new ObjectParameter("DetailsId", detailsId) :
                new ObjectParameter("DetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpliftNotificationDetails_Result>("GetUpliftNotificationDetails", employeeIDParameter, detailsIdParameter);
        }
    
        public virtual ObjectResult<GetUserRoleList_Result> GetUserRoleList(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRoleList_Result>("GetUserRoleList", roleIdParameter);
        }
    
        public virtual int SaveAllActivityTypeData(Nullable<int> employeeId, Nullable<int> year, string name, Nullable<int> currencyId, Nullable<int> workUnitId, Nullable<decimal> workerRate, Nullable<decimal> customerRate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("currencyId", currencyId) :
                new ObjectParameter("currencyId", typeof(int));
    
            var workUnitIdParameter = workUnitId.HasValue ?
                new ObjectParameter("workUnitId", workUnitId) :
                new ObjectParameter("workUnitId", typeof(int));
    
            var workerRateParameter = workerRate.HasValue ?
                new ObjectParameter("WorkerRate", workerRate) :
                new ObjectParameter("WorkerRate", typeof(decimal));
    
            var customerRateParameter = customerRate.HasValue ?
                new ObjectParameter("customerRate", customerRate) :
                new ObjectParameter("customerRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveAllActivityTypeData", employeeIdParameter, yearParameter, nameParameter, currencyIdParameter, workUnitIdParameter, workerRateParameter, customerRateParameter);
        }
    
        public virtual ObjectResult<SaveAllBenifitsData_Result> SaveAllBenifitsData(Nullable<int> employeeId, Nullable<int> benifitId, Nullable<System.DateTime> dateAward, Nullable<System.DateTime> expDate, Nullable<int> value, string comment, string attachment, Nullable<bool> recoveryOnTermination)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var benifitIdParameter = benifitId.HasValue ?
                new ObjectParameter("BenifitId", benifitId) :
                new ObjectParameter("BenifitId", typeof(int));
    
            var dateAwardParameter = dateAward.HasValue ?
                new ObjectParameter("DateAward", dateAward) :
                new ObjectParameter("DateAward", typeof(System.DateTime));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            var recoveryOnTerminationParameter = recoveryOnTermination.HasValue ?
                new ObjectParameter("RecoveryOnTermination", recoveryOnTermination) :
                new ObjectParameter("RecoveryOnTermination", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaveAllBenifitsData_Result>("SaveAllBenifitsData", employeeIdParameter, benifitIdParameter, dateAwardParameter, expDateParameter, valueParameter, commentParameter, attachmentParameter, recoveryOnTerminationParameter);
        }
    
        public virtual int SaveAllSalaryData(Nullable<int> employeeId, Nullable<System.DateTime> effectiveFrom, Nullable<int> salaryType, Nullable<int> paymentFrequancy, string amount, Nullable<int> curruncy, string totalSalary, Nullable<int> reasonForChange, string comment)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var salaryTypeParameter = salaryType.HasValue ?
                new ObjectParameter("SalaryType", salaryType) :
                new ObjectParameter("SalaryType", typeof(int));
    
            var paymentFrequancyParameter = paymentFrequancy.HasValue ?
                new ObjectParameter("PaymentFrequancy", paymentFrequancy) :
                new ObjectParameter("PaymentFrequancy", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var curruncyParameter = curruncy.HasValue ?
                new ObjectParameter("Curruncy", curruncy) :
                new ObjectParameter("Curruncy", typeof(int));
    
            var totalSalaryParameter = totalSalary != null ?
                new ObjectParameter("TotalSalary", totalSalary) :
                new ObjectParameter("TotalSalary", typeof(string));
    
            var reasonForChangeParameter = reasonForChange.HasValue ?
                new ObjectParameter("ReasonForChange", reasonForChange) :
                new ObjectParameter("ReasonForChange", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveAllSalaryData", employeeIdParameter, effectiveFromParameter, salaryTypeParameter, paymentFrequancyParameter, amountParameter, curruncyParameter, totalSalaryParameter, reasonForChangeParameter, commentParameter);
        }
    
        public virtual int SaveAllTraningData(Nullable<int> employeeId, Nullable<int> trainingNameId, string description, Nullable<int> importance, Nullable<int> status, Nullable<System.DateTime> startDate, Nullable<System.DateTime> emdDate, Nullable<System.DateTime> expDate, string provider, Nullable<decimal> cost, string note, string customFieldsJSON, string attachment)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var trainingNameIdParameter = trainingNameId.HasValue ?
                new ObjectParameter("TrainingNameId", trainingNameId) :
                new ObjectParameter("TrainingNameId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var importanceParameter = importance.HasValue ?
                new ObjectParameter("Importance", importance) :
                new ObjectParameter("Importance", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var emdDateParameter = emdDate.HasValue ?
                new ObjectParameter("emdDate", emdDate) :
                new ObjectParameter("emdDate", typeof(System.DateTime));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("expDate", expDate) :
                new ObjectParameter("expDate", typeof(System.DateTime));
    
            var providerParameter = provider != null ?
                new ObjectParameter("provider", provider) :
                new ObjectParameter("provider", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var customFieldsJSONParameter = customFieldsJSON != null ?
                new ObjectParameter("CustomFieldsJSON", customFieldsJSON) :
                new ObjectParameter("CustomFieldsJSON", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("attachment", attachment) :
                new ObjectParameter("attachment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveAllTraningData", employeeIdParameter, trainingNameIdParameter, descriptionParameter, importanceParameter, statusParameter, startDateParameter, emdDateParameter, expDateParameter, providerParameter, costParameter, noteParameter, customFieldsJSONParameter, attachmentParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        [DbFunction("EvolutionEntities", "Split")]
        public virtual IQueryable<string> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[EvolutionEntities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int UpdateAnnualLeaveApproveStatues(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAnnualLeaveApproveStatues", iDParameter);
        }
    
        public virtual int UpdateAnnualLeaveRejectStatues(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAnnualLeaveRejectStatues", idParameter);
        }
    
        public virtual int UpdateNewVacancyApproval(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNewVacancyApproval", iDParameter);
        }
    
        public virtual int UpdateNewVacancyReject(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNewVacancyReject", iDParameter);
        }
    
        public virtual int UpdateOtherLeaveApproval(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOtherLeaveApproval", iDParameter);
        }
    
        public virtual int UpdateOtherLeaveReject(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOtherLeaveReject", iDParameter);
        }
    
        public virtual int UpdateProjectTimesheetApproval(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProjectTimesheetApproval", iDParameter);
        }
    
        public virtual int UpdateProjectTimesheetReject(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProjectTimesheetReject", iDParameter);
        }
    
        public virtual int UpdateScheduleStatusApprove(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScheduleStatusApprove", iDParameter);
        }
    
        public virtual int UpdateScheduleStatusReject(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScheduleStatusReject", iDParameter);
        }
    
        public virtual int UpdateTimesheetApproval(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTimesheetApproval", iDParameter);
        }
    
        public virtual int UpdateTimesheetStatus_Reject(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTimesheetStatus_Reject", iDParameter);
        }
    
        public virtual int UpdateTrainingApproval(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTrainingApproval", iDParameter);
        }
    
        public virtual int UpdateTrainingReject(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTrainingReject", iDParameter);
        }
    
        public virtual int UpdateTravelApproveStatus(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTravelApproveStatus", iDParameter);
        }
    
        public virtual int UpdateTravelRejectStatus(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTravelRejectStatus", iDParameter);
        }
    
        public virtual int UpdateUpliftApproveStatus(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUpliftApproveStatus", idParameter);
        }
    
        public virtual int UpdateUserRole(Nullable<int> userId, Nullable<int> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserRole", userIdParameter, roleIdParameter);
        }
    
        public virtual int UpHolidayEntitlNextYearData(Nullable<int> employeeId, Nullable<int> nextYear)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var nextYearParameter = nextYear.HasValue ?
                new ObjectParameter("nextYear", nextYear) :
                new ObjectParameter("nextYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpHolidayEntitlNextYearData", employeeIdParameter, nextYearParameter);
        }
    
        public virtual int UpHolidayEntitlThisYearData(Nullable<int> employeeId, Nullable<int> thisYear)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var thisYearParameter = thisYear.HasValue ?
                new ObjectParameter("thisYear", thisYear) :
                new ObjectParameter("thisYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpHolidayEntitlThisYearData", employeeIdParameter, thisYearParameter);
        }
    
        public virtual int SaveAllTimeSheetData(Nullable<int> employeeId, Nullable<System.DateTime> date, Nullable<int> inTimeHr, Nullable<int> inTimeMin, Nullable<int> outTimeHr, Nullable<int> outTimeMin, Nullable<int> project, Nullable<int> costCode, Nullable<int> customer, Nullable<int> assetId, string comment, string attachment)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var inTimeHrParameter = inTimeHr.HasValue ?
                new ObjectParameter("InTimeHr", inTimeHr) :
                new ObjectParameter("InTimeHr", typeof(int));
    
            var inTimeMinParameter = inTimeMin.HasValue ?
                new ObjectParameter("InTimeMin", inTimeMin) :
                new ObjectParameter("InTimeMin", typeof(int));
    
            var outTimeHrParameter = outTimeHr.HasValue ?
                new ObjectParameter("OutTimeHr", outTimeHr) :
                new ObjectParameter("OutTimeHr", typeof(int));
    
            var outTimeMinParameter = outTimeMin.HasValue ?
                new ObjectParameter("OutTimeMin", outTimeMin) :
                new ObjectParameter("OutTimeMin", typeof(int));
    
            var projectParameter = project.HasValue ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(int));
    
            var costCodeParameter = costCode.HasValue ?
                new ObjectParameter("CostCode", costCode) :
                new ObjectParameter("CostCode", typeof(int));
    
            var customerParameter = customer.HasValue ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(int));
    
            var assetIdParameter = assetId.HasValue ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveAllTimeSheetData", employeeIdParameter, dateParameter, inTimeHrParameter, inTimeMinParameter, outTimeHrParameter, outTimeMinParameter, projectParameter, costCodeParameter, customerParameter, assetIdParameter, commentParameter, attachmentParameter);
        }
    
        public virtual int SaveAllTravelLeaveDetail(Nullable<int> employeeId, Nullable<int> fromCountryID, Nullable<int> fromStateId, Nullable<int> fromTownId, Nullable<int> fromAirportId, Nullable<int> toCountryID, Nullable<int> toStateId, Nullable<int> toTownId, Nullable<int> toAirportId, Nullable<int> reasonTravelId, Nullable<int> isLessDay, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string duration, string comment, Nullable<int> type, Nullable<int> customer, Nullable<int> project, Nullable<int> costcode, string attachment)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var fromCountryIDParameter = fromCountryID.HasValue ?
                new ObjectParameter("FromCountryID", fromCountryID) :
                new ObjectParameter("FromCountryID", typeof(int));
    
            var fromStateIdParameter = fromStateId.HasValue ?
                new ObjectParameter("FromStateId", fromStateId) :
                new ObjectParameter("FromStateId", typeof(int));
    
            var fromTownIdParameter = fromTownId.HasValue ?
                new ObjectParameter("FromTownId", fromTownId) :
                new ObjectParameter("FromTownId", typeof(int));
    
            var fromAirportIdParameter = fromAirportId.HasValue ?
                new ObjectParameter("FromAirportId", fromAirportId) :
                new ObjectParameter("FromAirportId", typeof(int));
    
            var toCountryIDParameter = toCountryID.HasValue ?
                new ObjectParameter("ToCountryID", toCountryID) :
                new ObjectParameter("ToCountryID", typeof(int));
    
            var toStateIdParameter = toStateId.HasValue ?
                new ObjectParameter("ToStateId", toStateId) :
                new ObjectParameter("ToStateId", typeof(int));
    
            var toTownIdParameter = toTownId.HasValue ?
                new ObjectParameter("ToTownId", toTownId) :
                new ObjectParameter("ToTownId", typeof(int));
    
            var toAirportIdParameter = toAirportId.HasValue ?
                new ObjectParameter("ToAirportId", toAirportId) :
                new ObjectParameter("ToAirportId", typeof(int));
    
            var reasonTravelIdParameter = reasonTravelId.HasValue ?
                new ObjectParameter("ReasonTravelId", reasonTravelId) :
                new ObjectParameter("ReasonTravelId", typeof(int));
    
            var isLessDayParameter = isLessDay.HasValue ?
                new ObjectParameter("IsLessDay", isLessDay) :
                new ObjectParameter("IsLessDay", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var durationParameter = duration != null ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var customerParameter = customer.HasValue ?
                new ObjectParameter("customer", customer) :
                new ObjectParameter("customer", typeof(int));
    
            var projectParameter = project.HasValue ?
                new ObjectParameter("project", project) :
                new ObjectParameter("project", typeof(int));
    
            var costcodeParameter = costcode.HasValue ?
                new ObjectParameter("costcode", costcode) :
                new ObjectParameter("costcode", typeof(int));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveAllTravelLeaveDetail", employeeIdParameter, fromCountryIDParameter, fromStateIdParameter, fromTownIdParameter, fromAirportIdParameter, toCountryIDParameter, toStateIdParameter, toTownIdParameter, toAirportIdParameter, reasonTravelIdParameter, isLessDayParameter, startDateParameter, endDateParameter, durationParameter, commentParameter, typeParameter, customerParameter, projectParameter, costcodeParameter, attachmentParameter);
        }
    
        public virtual ObjectResult<GetLoginUserRoleType_Result> GetLoginUserRoleType(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoginUserRoleType_Result>("GetLoginUserRoleType", userIdParameter);
        }
    
        public virtual ObjectResult<GetAllEmployeeCountry_Result> GetAllEmployeeCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeeCountry_Result>("GetAllEmployeeCountry");
        }
    
        public virtual ObjectResult<GetEmployeeAnualLeaveBenefitList_Result> GetEmployeeAnualLeaveBenefitList(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeAnualLeaveBenefitList_Result>("GetEmployeeAnualLeaveBenefitList", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetAnualLeaveEmployeeBenefit_Result> GetAnualLeaveEmployeeBenefit(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAnualLeaveEmployeeBenefit_Result>("GetAnualLeaveEmployeeBenefit", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetEmployeeTaskList_Result> GetEmployeeTaskList(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeTaskList_Result>("GetEmployeeTaskList", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetYearInformation_Result> GetYearInformation(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetYearInformation_Result>("GetYearInformation", yearParameter);
        }
    
        public virtual int UpdateUpliftRejectStatus(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUpliftRejectStatus", idParameter);
        }
    
        public virtual ObjectResult<GetScheduleApprovalList_Result> GetScheduleApprovalList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScheduleApprovalList_Result>("GetScheduleApprovalList");
        }
    
        public virtual ObjectResult<GetNewVacancyList_Result> GetNewVacancyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewVacancyList_Result>("GetNewVacancyList");
        }
    
        public virtual ObjectResult<GetTrainingRequest_Result> GetTrainingRequest(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingRequest_Result>("GetTrainingRequest", empIdParameter);
        }
    
        public virtual int SaveAllSchadulingData(Nullable<int> employeeId, Nullable<bool> isLessThenADay, Nullable<bool> isDayorMore, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> duration, Nullable<int> customer, Nullable<int> project, Nullable<int> asset, string comment, Nullable<decimal> hrSD, Nullable<decimal> minSD, Nullable<System.DateTime> cDate, Nullable<decimal> hrED, Nullable<decimal> minED, Nullable<decimal> durationHr)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var isLessThenADayParameter = isLessThenADay.HasValue ?
                new ObjectParameter("IsLessThenADay", isLessThenADay) :
                new ObjectParameter("IsLessThenADay", typeof(bool));
    
            var isDayorMoreParameter = isDayorMore.HasValue ?
                new ObjectParameter("IsDayorMore", isDayorMore) :
                new ObjectParameter("IsDayorMore", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(decimal));
    
            var customerParameter = customer.HasValue ?
                new ObjectParameter("customer", customer) :
                new ObjectParameter("customer", typeof(int));
    
            var projectParameter = project.HasValue ?
                new ObjectParameter("project", project) :
                new ObjectParameter("project", typeof(int));
    
            var assetParameter = asset.HasValue ?
                new ObjectParameter("asset", asset) :
                new ObjectParameter("asset", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            var hrSDParameter = hrSD.HasValue ?
                new ObjectParameter("HrSD", hrSD) :
                new ObjectParameter("HrSD", typeof(decimal));
    
            var minSDParameter = minSD.HasValue ?
                new ObjectParameter("MinSD", minSD) :
                new ObjectParameter("MinSD", typeof(decimal));
    
            var cDateParameter = cDate.HasValue ?
                new ObjectParameter("CDate", cDate) :
                new ObjectParameter("CDate", typeof(System.DateTime));
    
            var hrEDParameter = hrED.HasValue ?
                new ObjectParameter("HrED", hrED) :
                new ObjectParameter("HrED", typeof(decimal));
    
            var minEDParameter = minED.HasValue ?
                new ObjectParameter("MinED", minED) :
                new ObjectParameter("MinED", typeof(decimal));
    
            var durationHrParameter = durationHr.HasValue ?
                new ObjectParameter("durationHr", durationHr) :
                new ObjectParameter("durationHr", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveAllSchadulingData", employeeIdParameter, isLessThenADayParameter, isDayorMoreParameter, startDateParameter, endDateParameter, durationParameter, customerParameter, projectParameter, assetParameter, commentParameter, hrSDParameter, minSDParameter, cDateParameter, hrEDParameter, minEDParameter, durationHrParameter);
        }
    
        public virtual ObjectResult<GetTotalHolidayEntiAndPublicHoliday_Result> GetTotalHolidayEntiAndPublicHoliday()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalHolidayEntiAndPublicHoliday_Result>("GetTotalHolidayEntiAndPublicHoliday");
        }
    
        public virtual ObjectResult<GetDefaultCurrenciesCode_Result> GetDefaultCurrenciesCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDefaultCurrenciesCode_Result>("GetDefaultCurrenciesCode");
        }
    
        public virtual ObjectResult<getEmpNameById_Result> getEmpNameById(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmpNameById_Result>("getEmpNameById", empIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAllEmployeeSkill(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAllEmployeeSkill", empIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAllEmployeeTotalSkillEndorse(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAllEmployeeTotalSkillEndorse", empIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetLengthOfEmployment(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetLengthOfEmployment", employeeIDParameter);
        }
    
        public virtual ObjectResult<GetPublicHoliday_Result> GetPublicHoliday(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPublicHoliday_Result>("GetPublicHoliday", empIdParameter);
        }
    
        public virtual ObjectResult<GetPublicHolidayByCountryID_Result> GetPublicHolidayByCountryID(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPublicHolidayByCountryID_Result>("GetPublicHolidayByCountryID", countryIDParameter);
        }
    
        public virtual ObjectResult<GetResourcePool_Result> GetResourcePool(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResourcePool_Result>("GetResourcePool", empIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAllAllPublicHolidayByEmployee(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAllAllPublicHolidayByEmployee", empIdParameter);
        }
    
        public virtual ObjectResult<GetSkillEndFilterByAllEmployee_Result> GetSkillEndFilterByAllEmployee(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSkillEndFilterByAllEmployee_Result>("GetSkillEndFilterByAllEmployee", empIdParameter);
        }
    
        public virtual ObjectResult<GetHolidayAndAbsenecByEmployee_Result> GetHolidayAndAbsenecByEmployee(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHolidayAndAbsenecByEmployee_Result>("GetHolidayAndAbsenecByEmployee", employeeIDParameter);
        }
    
        public virtual ObjectResult<getTotalTimesheetDuration_Result> getTotalTimesheetDuration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTotalTimesheetDuration_Result>("getTotalTimesheetDuration");
        }
    
        public virtual ObjectResult<GetReportToResource_Result> GetReportToResource(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportToResource_Result>("GetReportToResource", empIdParameter);
        }
    
        public virtual ObjectResult<GetWorkPatternDataById_Result> GetWorkPatternDataById(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkPatternDataById_Result>("GetWorkPatternDataById", employeeIDParameter);
        }
    
        public virtual ObjectResult<GetCertificateDetail_Result> GetCertificateDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCertificateDetail_Result>("GetCertificateDetail");
        }
    
        public virtual ObjectResult<GetVisaDetail_Result> GetVisaDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVisaDetail_Result>("GetVisaDetail");
        }
    
        public virtual ObjectResult<GetResourceDatabyFilterTimesheet_Result> GetResourceDatabyFilterTimesheet(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResourceDatabyFilterTimesheet_Result>("GetResourceDatabyFilterTimesheet", dateParameter);
        }
    
        public virtual ObjectResult<GetResourceDatabyFilter_Result> GetResourceDatabyFilter(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResourceDatabyFilter_Result>("GetResourceDatabyFilter", dateParameter);
        }
    
        public virtual ObjectResult<GetResourceDatabyFilterUplift_Result> GetResourceDatabyFilterUplift(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResourceDatabyFilterUplift_Result>("GetResourceDatabyFilterUplift", dateParameter);
        }
    
        public virtual ObjectResult<GetResourcePlannerDatabyFilterTimesheet_Result> GetResourcePlannerDatabyFilterTimesheet(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResourcePlannerDatabyFilterTimesheet_Result>("GetResourcePlannerDatabyFilterTimesheet", dateParameter);
        }
    
        public virtual ObjectResult<GetResourcePlannerDatabyFilterTravel_Result> GetResourcePlannerDatabyFilterTravel(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResourcePlannerDatabyFilterTravel_Result>("GetResourcePlannerDatabyFilterTravel", dateParameter);
        }
    
        public virtual ObjectResult<getTotalProjectPlannerTimesheetDuration_Result> getTotalProjectPlannerTimesheetDuration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTotalProjectPlannerTimesheetDuration_Result>("getTotalProjectPlannerTimesheetDuration");
        }
    
        public virtual ObjectResult<getTotalProjectPlannerUpliftDuration_Result> getTotalProjectPlannerUpliftDuration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTotalProjectPlannerUpliftDuration_Result>("getTotalProjectPlannerUpliftDuration");
        }
    
        public virtual ObjectResult<GetAllEmployeeCaseDetail_Result> GetAllEmployeeCaseDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeeCaseDetail_Result>("GetAllEmployeeCaseDetail");
        }
    
        public virtual ObjectResult<GetAllPublicHolidayByEmployee_JobCountry_Result> GetAllPublicHolidayByEmployee_JobCountry(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPublicHolidayByEmployee_JobCountry_Result>("GetAllPublicHolidayByEmployee_JobCountry", empIdParameter);
        }
    
        public virtual ObjectResult<GetEndorseRecipientemployeeDetail_Result> GetEndorseRecipientemployeeDetail(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEndorseRecipientemployeeDetail_Result>("GetEndorseRecipientemployeeDetail", empIdParameter);
        }
    
        public virtual ObjectResult<GetSickLeaveApprovelList_Result> GetSickLeaveApprovelList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSickLeaveApprovelList_Result>("GetSickLeaveApprovelList");
        }
    
        public virtual ObjectResult<GetUpliftApprove_Result> GetUpliftApprove()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpliftApprove_Result>("GetUpliftApprove");
        }
    
        public virtual ObjectResult<GetAllApproveRequestList_Result> GetAllApproveRequestList(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllApproveRequestList_Result>("GetAllApproveRequestList", employeeIDParameter);
        }
    
        public virtual ObjectResult<GetSick_Approval_Result> GetSick_Approval()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSick_Approval_Result>("GetSick_Approval");
        }
    
        public virtual ObjectResult<GetMatPatLeave_Approval_Result> GetMatPatLeave_Approval()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMatPatLeave_Approval_Result>("GetMatPatLeave_Approval");
        }
    
        public virtual ObjectResult<GetTravelApproval_Result> GetTravelApproval()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTravelApproval_Result>("GetTravelApproval");
        }
    
        public virtual ObjectResult<GetResourceEmployeeData_Result> GetResourceEmployeeData(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResourceEmployeeData_Result>("GetResourceEmployeeData", employeeIDParameter);
        }
    
        public virtual int UpdateMat_PatRejectStatus(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMat_PatRejectStatus", iDParameter);
        }
    
        public virtual ObjectResult<GetAllNotificationList_Result> GetAllNotificationList(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllNotificationList_Result>("GetAllNotificationList", employeeIDParameter);
        }
    
        public virtual int UpdateSickLeaveApproval(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSickLeaveApproval", iDParameter);
        }
    
        public virtual int UpdateSickRejectStatus(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSickRejectStatus", idParameter);
        }
    
        public virtual int UpdateMat_PatApproveStatus(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMat_PatApproveStatus", iDParameter);
        }
    
        public virtual ObjectResult<GetBusinessOrgChart_Result> GetBusinessOrgChart(Nullable<int> businessId, Nullable<int> divisionId, Nullable<int> poolId, Nullable<int> functionId, Nullable<int> emptypeId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("divisionId", divisionId) :
                new ObjectParameter("divisionId", typeof(int));
    
            var poolIdParameter = poolId.HasValue ?
                new ObjectParameter("poolId", poolId) :
                new ObjectParameter("poolId", typeof(int));
    
            var functionIdParameter = functionId.HasValue ?
                new ObjectParameter("functionId", functionId) :
                new ObjectParameter("functionId", typeof(int));
    
            var emptypeIdParameter = emptypeId.HasValue ?
                new ObjectParameter("emptypeId", emptypeId) :
                new ObjectParameter("emptypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBusinessOrgChart_Result>("GetBusinessOrgChart", businessIdParameter, divisionIdParameter, poolIdParameter, functionIdParameter, emptypeIdParameter);
        }
    
        public virtual ObjectResult<GetEmployeeSearchList_Result> GetEmployeeSearchList(Nullable<int> bussinessID, Nullable<int> divisionId, Nullable<int> poolId, Nullable<int> functionId, Nullable<int> jobTitleId, Nullable<int> countryId)
        {
            var bussinessIDParameter = bussinessID.HasValue ?
                new ObjectParameter("BussinessID", bussinessID) :
                new ObjectParameter("BussinessID", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var poolIdParameter = poolId.HasValue ?
                new ObjectParameter("PoolId", poolId) :
                new ObjectParameter("PoolId", typeof(int));
    
            var functionIdParameter = functionId.HasValue ?
                new ObjectParameter("FunctionId", functionId) :
                new ObjectParameter("FunctionId", typeof(int));
    
            var jobTitleIdParameter = jobTitleId.HasValue ?
                new ObjectParameter("JobTitleId", jobTitleId) :
                new ObjectParameter("JobTitleId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeSearchList_Result>("GetEmployeeSearchList", bussinessIDParameter, divisionIdParameter, poolIdParameter, functionIdParameter, jobTitleIdParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<GetResourceDatabyFilterTravel_Result> GetResourceDatabyFilterTravel(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResourceDatabyFilterTravel_Result>("GetResourceDatabyFilterTravel", dateParameter);
        }
    
        public virtual ObjectResult<GetTMSRecruitmentProcessChart_Result> GetTMSRecruitmentProcessChart(Nullable<int> recId, Nullable<int> bussinessID, Nullable<int> divisionId, Nullable<int> poolId, Nullable<int> functionId)
        {
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(int));
    
            var bussinessIDParameter = bussinessID.HasValue ?
                new ObjectParameter("BussinessID", bussinessID) :
                new ObjectParameter("BussinessID", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var poolIdParameter = poolId.HasValue ?
                new ObjectParameter("PoolId", poolId) :
                new ObjectParameter("PoolId", typeof(int));
    
            var functionIdParameter = functionId.HasValue ?
                new ObjectParameter("FunctionId", functionId) :
                new ObjectParameter("FunctionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTMSRecruitmentProcessChart_Result>("GetTMSRecruitmentProcessChart", recIdParameter, bussinessIDParameter, divisionIdParameter, poolIdParameter, functionIdParameter);
        }
    
        public virtual ObjectResult<GetAllOverAllScorePerformance_Result> GetAllOverAllScorePerformance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOverAllScorePerformance_Result>("GetAllOverAllScorePerformance");
        }
    
        public virtual ObjectResult<GetAllCoreScorePerformance_Result> GetAllCoreScorePerformance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCoreScorePerformance_Result>("GetAllCoreScorePerformance");
        }
    
        public virtual ObjectResult<GetAllEmployeePearformanceDetail_Result> GetAllEmployeePearformanceDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeePearformanceDetail_Result>("GetAllEmployeePearformanceDetail");
        }
    
        public virtual int GetAllEmployeeSearchData1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllEmployeeSearchData1");
        }
    
        public virtual ObjectResult<GetAllEmployeeSearchData_Result> GetAllEmployeeSearchData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeeSearchData_Result>("GetAllEmployeeSearchData");
        }
    
        public virtual ObjectResult<GetEmployeeProfileData_Result> GetEmployeeProfileData(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeProfileData_Result>("GetEmployeeProfileData", employeeIDParameter);
        }
    }
}
